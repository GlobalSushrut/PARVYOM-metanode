version: '3.8'

services:
  # BPCI Server - Main coordinator for the testnet
  bpci-server:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.bpci-server
    container_name: parvyom-bpci-server
    restart: unless-stopped
    ports:
      - "8545:8545"   # JSON-RPC API
      - "8546:8546"   # WebSocket API
      - "9545:9545"   # BPCI Community API
      - "3000:3000"   # Management Dashboard
      - "9090:9090"   # Prometheus metrics
    environment:
      - NETWORK=testnet
      - CHAIN_ID=1337
      - NETWORK_ID=parvyom-testnet-v1
      - DB_PASSWORD=${DB_PASSWORD}
      - RUST_LOG=info
    volumes:
      - ./cloud-testnet.toml:/etc/bpci-server/server.toml:ro
      - bpci_data:/var/lib/bpci-server
      - bpci_logs:/var/log/parvyom-testnet
    depends_on:
      - postgres
      - redis
    networks:
      - testnet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Validator Node 1
  validator-1:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.validator
    container_name: parvyom-validator-1
    restart: unless-stopped
    ports:
      - "30303:30303"   # P2P networking
      - "30303:30303/udp"
    environment:
      - VALIDATOR_ID=1
      - VALIDATOR_KEY=${VALIDATOR_1_KEY}
      - COINBASE=${VALIDATOR_1_ADDRESS}
      - NETWORK=testnet
      - CHAIN_ID=1337
    volumes:
      - validator1_data:/var/lib/validator
      - ./cloud-testnet.toml:/etc/validator/config.toml:ro
    networks:
      - testnet-network
    depends_on:
      - bpci-server

  # Validator Node 2
  validator-2:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.validator
    container_name: parvyom-validator-2
    restart: unless-stopped
    ports:
      - "30304:30303"   # P2P networking (different host port)
      - "30304:30303/udp"
    environment:
      - VALIDATOR_ID=2
      - VALIDATOR_KEY=${VALIDATOR_2_KEY}
      - COINBASE=${VALIDATOR_2_ADDRESS}
      - NETWORK=testnet
      - CHAIN_ID=1337
    volumes:
      - validator2_data:/var/lib/validator
      - ./cloud-testnet.toml:/etc/validator/config.toml:ro
    networks:
      - testnet-network
    depends_on:
      - bpci-server

  # Validator Node 3
  validator-3:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.validator
    container_name: parvyom-validator-3
    restart: unless-stopped
    ports:
      - "30305:30303"   # P2P networking (different host port)
      - "30305:30303/udp"
    environment:
      - VALIDATOR_ID=3
      - VALIDATOR_KEY=${VALIDATOR_3_KEY}
      - COINBASE=${VALIDATOR_3_ADDRESS}
      - NETWORK=testnet
      - CHAIN_ID=1337
    volumes:
      - validator3_data:/var/lib/validator
      - ./cloud-testnet.toml:/etc/validator/config.toml:ro
    networks:
      - testnet-network
    depends_on:
      - bpci-server

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: parvyom-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=testnet
      - POSTGRES_USER=testnet
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - testnet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testnet -d testnet"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: parvyom-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - testnet-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Block Explorer
  explorer:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.explorer
    container_name: parvyom-explorer
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - RPC_URL=http://bpci-server:8545
      - WS_URL=ws://bpci-server:8546
      - NETWORK_NAME=PARVYOM Testnet
      - CHAIN_ID=1337
    depends_on:
      - bpci-server
    networks:
      - testnet-network

  # Testnet Faucet
  faucet:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.faucet
    container_name: parvyom-faucet
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - RPC_URL=http://bpci-server:8545
      - FAUCET_KEY=${FAUCET_PRIVATE_KEY}
      - FAUCET_AMOUNT=10.0
      - COOLDOWN_HOURS=24
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - bpci-server
      - redis
    networks:
      - testnet-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: parvyom-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - testnet-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: parvyom-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - testnet-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: parvyom-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - bpci-server
      - explorer
      - faucet
      - grafana
    networks:
      - testnet-network

volumes:
  bpci_data:
    driver: local
  bpci_logs:
    driver: local
  validator1_data:
    driver: local
  validator2_data:
    driver: local
  validator3_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  testnet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
